security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    #permet de hasher le mot de passe
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    #Permet de fournir un utilisateur ici c'est l'entity user qui represente la table user dans le bdd et le username permet de s'authentifer
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username

     # Les firewalls permettent de proteger nos pages
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        #firewall pour la connexion
        main:
            lazy: true
            #
            provider: app_user_provider
            #la class qui gére l'authentification
            custom_authenticator: App\Security\UserAuthentificatorAuthenticator

            #type d'accés à notre firewall main
            #form_login:
                #login_path: app_login
                #check_path: app_login
            #qui gére la deconnexion
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login

            # "le souviens de moi" a été acitvé
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                # by default, the feature is enabled by checking a checkbox in the
                # login form, uncomment the following line to always enable it.
               # always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall
            
            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    #permet de verifier les permissions ex: exemple interdire l'accés à tous les urls qui commencent par admin ...
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
